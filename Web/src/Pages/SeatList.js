import { useState, useEffect } from 'react';
import ApiService from '../services/ApiService';
import { 
  Pencil, 
  Trash, 
  Plus, 
  RefreshCw, 
  Sparkles, 
  Trash2,
} from 'lucide-react';

const SeatList = () => {
  const [cinemas, setCinemas] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [seats, setSeats] = useState([]);
  const [selectedCinema, setSelectedCinema] = useState('');
  const [selectedRoom, setSelectedRoom] = useState('');
  const [selectedSeat, setSelectedSeat] = useState(null);
  const [openSeatDialog, setOpenSeatDialog] = useState(false);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
  const [openAutoGenerateDialog, setOpenAutoGenerateDialog] = useState(false);
  const [openDeleteAllDialog, setOpenDeleteAllDialog] = useState(false);
  const [seatForm, setSeatForm] = useState({ name: '', price: 0 });
  const [autoGenerateForm, setAutoGenerateForm] = useState({
    rows: 10,
    seatsPerRow: 12,
    basePrice: 50000
  });
  const [isEditMode, setIsEditMode] = useState(false);
  const [loading, setLoading] = useState(false);
  const [notification, setNotification] = useState({ 
    show: false, 
    message: '', 
    type: 'info' 
  });
  
  // Load cinemas on component mount
  useEffect(() => {
    fetchCinemas();
  }, []);

  // Load rooms when cinema is selected
  useEffect(() => {
    if (selectedCinema) {
      fetchRooms(selectedCinema);
    } else {
      setRooms([]);
      setSelectedRoom('');
    }
  }, [selectedCinema]);

  // Load seats when room is selected
  useEffect(() => {
    if (selectedRoom) {
      fetchSeats(selectedRoom);
    } else {
      setSeats([]);
    }
  }, [selectedRoom]);

  const fetchCinemas = async () => {
    try {
      setLoading(true);
      const response = await ApiService.getCinemas();
      setCinemas(response.data);
      setLoading(false);
    } catch (error) {
      showNotification('Lỗi khi tải danh sách rạp: ' + error.message, 'error');
      setLoading(false);
    }
  };

  const fetchRooms = async (cinemaId) => {
    try {
      setLoading(true);
      const response = await ApiService.getRooms(cinemaId);
      setRooms(response.data);
      setLoading(false);
    } catch (error) {
      showNotification('Lỗi khi tải danh sách phòng: ' + error.message, 'error');
      setLoading(false);
    }
  };

// Cập nhật hàm fetchSeats trong SeatList.js để sử dụng showNotification thay vì message.error

const fetchSeats = async (roomId) => {
  try {
    setLoading(true);
    console.log(`Đang lấy dữ liệu ghế cho phòng ${roomId}...`);
    
    const response = await ApiService.getSeatsByRoom(roomId);
    console.log('Dữ liệu ghế trả về:', response);
    
    // Kiểm tra cấu trúc dữ liệu trả về
    if (response && response.data) {
      // Cấu trúc 1: { data: { room: {...}, seats: [...] } }
      if (response.data.data && Array.isArray(response.data.data.seats)) {
        console.log('Định dạng dữ liệu: data.data.seats');
        setSeats(response.data.data.seats);
      } 
      // Cấu trúc 2: { data: [...] }
      else if (Array.isArray(response.data)) {
        console.log('Định dạng dữ liệu: data (array)');
        setSeats(response.data);
      }
      // Cấu trúc 3: { data: { seats: [...] } }
      else if (response.data.seats && Array.isArray(response.data.seats)) {
        console.log('Định dạng dữ liệu: data.seats');
        setSeats(response.data.seats);
      }
      // Cấu trúc khác không xác định
      else {
        console.error('Không thể xác định cấu trúc dữ liệu:', response.data);
        showNotification('Cấu trúc dữ liệu không được hỗ trợ', 'error');
      }
    } else {
      console.error('Không có dữ liệu trả về hoặc cấu trúc không đúng');
      showNotification('Không thể lấy dữ liệu ghế', 'error');
    }
    
    setLoading(false);
  } catch (error) {
    console.error('Lỗi khi lấy danh sách ghế:', error);
    showNotification('Lỗi khi tải danh sách ghế: ' + (error.message || 'Lỗi không xác định'), 'error');
    setLoading(false);
  }
};

  const showNotification = (message, type = 'info') => {
    setNotification({ show: true, message, type });
    setTimeout(() => {
      setNotification({ ...notification, show: false });
    }, 5000);
  };

  // Handle form input changes
  const handleSeatFormChange = (e) => {
    const { name, value } = e.target;
    setSeatForm({
      ...seatForm,
      [name]: name === 'price' ? Number(value) : value
    });
  };

  const handleAutoGenerateFormChange = (e) => {
    const { name, value } = e.target;
    setAutoGenerateForm({
      ...autoGenerateForm,
      [name]: Number(value)
    });
  };

  // Open dialogs
  const handleAddSeat = () => {
    setIsEditMode(false);
    setSeatForm({ name: '', price: 0 });
    setOpenSeatDialog(true);
  };

  const handleEditSeat = (seat) => {
    setIsEditMode(true);
    setSelectedSeat(seat);
    setSeatForm({
      name: seat.name,
      price: seat.price
    });
    setOpenSeatDialog(true);
  };

  const handleOpenDeleteDialog = (seat) => {
    setSelectedSeat(seat);
    setOpenDeleteDialog(true);
  };

  const handleOpenAutoGenerateDialog = () => {
    setOpenAutoGenerateDialog(true);
  };

  const handleOpenDeleteAllDialog = () => {
    setOpenDeleteAllDialog(true);
  };

  // Close dialogs
  const handleCloseDialogs = () => {
    setOpenSeatDialog(false);
    setOpenDeleteDialog(false);
    setOpenAutoGenerateDialog(false);
    setOpenDeleteAllDialog(false);
  };

  // Submit handlers
  const handleSeatSubmit = async () => {
    try {
      setLoading(true);
      
      if (isEditMode && selectedSeat) {
        await ApiService.updateSeat(selectedSeat._id, {
          ...seatForm,
          room: selectedRoom
        });
        showNotification(`Cập nhật ghế ${seatForm.name} thành công`, 'success');
      } else {
        await ApiService.createSeat({
          ...seatForm,
          room: selectedRoom
        });
        showNotification(`Thêm ghế ${seatForm.name} thành công`, 'success');
      }
      
      // Refresh seats
      fetchSeats(selectedRoom);
      handleCloseDialogs();
    } catch (error) {
      showNotification('Lỗi: ' + error.message, 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteSeat = async () => {
    try {
      setLoading(true);
      await ApiService.deleteSeat(selectedSeat._id);
      showNotification(`Xóa ghế ${selectedSeat.name} thành công`, 'success');
      
      // Refresh seats
      fetchSeats(selectedRoom);
      handleCloseDialogs();
    } catch (error) {
      showNotification('Lỗi: ' + error.message, 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleAutoGenerate = async () => {
    try {
      setLoading(true);
      await ApiService.autoGenerateSeats(selectedRoom, autoGenerateForm);
      showNotification('Tạo ghế tự động thành công', 'success');
      
      // Refresh seats
      fetchSeats(selectedRoom);
      handleCloseDialogs();
    } catch (error) {
      showNotification('Lỗi: ' + error.message, 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteAllSeats = async () => {
    try {
      setLoading(true);
      await ApiService.deleteAllSeatsInRoom(selectedRoom);
      showNotification('Xóa tất cả ghế thành công', 'success');
      
      // Refresh seats
      fetchSeats(selectedRoom);
      handleCloseDialogs();
    } catch (error) {
      showNotification('Lỗi: ' + error.message, 'error');
    } finally {
      setLoading(false);
    }
  };

  // Group seats by row
  const groupedSeats = seats.reduce((acc, seat) => {
    // Extract row letter from seat name (e.g. 'A' from 'A1')
    const row = seat.name.match(/^[A-Z]+/)?.[0] || 'Other';
    
    if (!acc[row]) {
      acc[row] = [];
    }
    
    acc[row].push(seat);
    return acc;
  }, {});

  // Sort rows alphabetically
  const sortedRows = Object.keys(groupedSeats).sort();

  // Format price as VND
  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(price);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h1 className="text-2xl font-bold mb-4">Quản lý Ghế</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Rạp phim
            </label>
            <select
              className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={selectedCinema}
              onChange={(e) => setSelectedCinema(e.target.value)}
            >
              <option value="">Chọn rạp phim</option>
              {cinemas.map((cinema) => (
                <option key={cinema._id} value={cinema._id}>
                  {cinema.name}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Phòng chiếu
            </label>
            <select
              className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={selectedRoom}
              onChange={(e) => setSelectedRoom(e.target.value)}
              disabled={!selectedCinema}
            >
              <option value="">Chọn phòng chiếu</option>
              {rooms.map((room) => (
                <option key={room._id} value={room._id}>
                  {room.name}
                </option>
              ))}
            </select>
          </div>
        </div>
        
        {selectedRoom && (
          <div className="flex justify-between">
            <button 
              className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md flex items-center"
              onClick={handleAddSeat}
            >
              <Plus className="mr-1 h-4 w-4" /> Thêm ghế
            </button>
            
            <div>
              <button 
                className="bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-md flex items-center mr-2"
                onClick={handleOpenAutoGenerateDialog}
              >
                <Sparkles className="mr-1 h-4 w-4" /> Tạo ghế tự động
              </button>
              
              <button 
                className="bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-md flex items-center"
                onClick={handleOpenDeleteAllDialog}
              >
                <Trash2 className="mr-1 h-4 w-4" /> Xóa tất cả ghế
              </button>
            </div>
          </div>
        )}
      </div>

      {selectedRoom && (
        <>
          {/* Hiển thị sơ đồ ghế */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">Sơ đồ ghế</h2>
              <button 
                className="flex items-center text-blue-600 hover:text-blue-800"
                onClick={() => fetchSeats(selectedRoom)}
              >
                <RefreshCw className="mr-1 h-4 w-4" /> Làm mới
              </button>
            </div>
            
            <hr className="mb-6" />
            
            {seats.length === 0 ? (
              <div className="text-center py-10">
                <p className="text-gray-500 mb-4">
                  Chưa có ghế nào trong phòng này
                </p>
                <button 
                  className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md"
                  onClick={handleOpenAutoGenerateDialog}
                >
                  Tạo ghế tự động
                </button>
              </div>
            ) : (
              <>
                {/* Màn hình phim */}
                <div className="w-4/5 h-2 bg-blue-600 mx-auto mb-10 rounded"></div>
                <p className="text-center text-gray-500 italic mb-8">Màn hình</p>
                
                {/* Hiển thị ghế theo hàng */}
                <div className="flex flex-col gap-4">
                  {sortedRows.map((row) => (
                    <div key={row} className="flex flex-wrap gap-2 justify-center">
                      {/* Hiển thị tên hàng */}
                      <div className="flex items-center justify-center w-10">
                        <span className="font-bold">{row}</span>
                      </div>
                      
                      {/* Hiển thị các ghế trong hàng */}
                      {groupedSeats[row]
                        .sort((a, b) => {
                          // Sort by seat number (e.g. '1' from 'A1')
                          const numA = parseInt(a.name.match(/\d+/)?.[0] || 0);
                          const numB = parseInt(b.name.match(/\d+/)?.[0] || 0);
                          return numA - numB;
                        })
                        .map((seat) => (
                          <div
                            key={seat._id}
                            className="w-10 h-10 flex flex-col items-center justify-center bg-white border border-gray-300 rounded shadow relative group"
                          >
                            <span className="text-xs font-medium">{seat.name}</span>
                            <span className="text-xs text-gray-500">
                              {formatPrice(seat.price).replace('₫', '').trim()}
                            </span>
                            
                            {/* Seat actions */}
                            <div className="absolute top-0 right-0 flex opacity-0 group-hover:opacity-100 transition-opacity">
                              <button 
                                className="p-1 text-blue-600 hover:text-blue-800"
                                onClick={() => handleEditSeat(seat)}
                              >
                                <Pencil className="h-3 w-3" />
                              </button>
                              <button 
                                className="p-1 text-red-600 hover:text-red-800"
                                onClick={() => handleOpenDeleteDialog(seat)}
                              >
                                <Trash className="h-3 w-3" />
                              </button>
                            </div>
                          </div>
                        ))}
                    </div>
                  ))}
                </div>
              </>
            )}
          </div>
          
          {/* Bảng danh sách ghế */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold mb-4">Danh sách ghế</h2>
            
            <div className="mt-4">
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {seats.length === 0 ? (
                  <div className="col-span-full text-center text-gray-500">
                    Không có dữ liệu
                  </div>
                ) : (
                  seats.map((seat) => (
                    <div key={seat._id} className="bg-white rounded-lg border border-gray-300 p-4">
                      <div className="flex justify-between">
                        <h3 className="text-lg font-semibold">{seat.name}</h3>
                        <div>
                          <button 
                            className="p-1 text-blue-600 hover:text-blue-800 mr-1"
                            onClick={() => handleEditSeat(seat)}
                          >
                            <Pencil className="h-4 w-4" />
                          </button>
                          <button 
                            className="p-1 text-red-600 hover:text-red-800"
                            onClick={() => handleOpenDeleteDialog(seat)}
                          >
                            <Trash className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                      <p className="text-gray-700">
                        Giá: {formatPrice(seat.price)}
                      </p>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </>
      )}
      
      {/* Dialog thêm/sửa ghế */}
      {openSeatDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-semibold mb-4">
              {isEditMode ? `Sửa ghế ${selectedSeat?.name}` : 'Thêm ghế mới'}
            </h2>
            
            <div className="mt-4">
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Tên ghế
                </label>
                <input
                  type="text"
                  name="name"
                  value={seatForm.name}
                  onChange={handleSeatFormChange}
                  className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Giá (VND)
                </label>
                <input
                  type="number"
                  name="price"
                  value={seatForm.price}
                  onChange={handleSeatFormChange}
                  className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  min="0"
                  required
                />
              </div>
            </div>
            
            <div className="flex justify-end gap-2 mt-6">
              <button 
                className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100"
                onClick={handleCloseDialogs}
              >
                Hủy
              </button>
              <button 
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                onClick={handleSeatSubmit}
                disabled={!seatForm.name || seatForm.price <= 0}
              >
                {isEditMode ? 'Cập nhật' : 'Thêm'}
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Dialog xác nhận xóa ghế */}
      {openDeleteDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-semibold mb-4">Xác nhận xóa</h2>
            <p className="mb-6">
              Bạn có chắc chắn muốn xóa ghế {selectedSeat?.name} không?
            </p>
            
            <div className="flex justify-end gap-2">
              <button 
                className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100"
                onClick={handleCloseDialogs}
              >
                Hủy
              </button>
              <button 
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
                onClick={handleDeleteSeat}
              >
                Xóa
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Dialog tạo ghế tự động */}
      {openAutoGenerateDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-semibold mb-4">Tạo ghế tự động</h2>
            <p className="mb-4 text-gray-600">
              Thiết lập cấu hình cho việc tạo ghế tự động
            </p>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Số hàng
              </label>
              <input
                type="number"
                name="rows"
                value={autoGenerateForm.rows}
                onChange={handleAutoGenerateFormChange}
                className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                min="1"
                max="15"
                required
              />
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Số ghế mỗi hàng
              </label>
              <input
                type="number"
                name="seatsPerRow"
                value={autoGenerateForm.seatsPerRow}
                onChange={handleAutoGenerateFormChange}
                className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                min="1"
                max="20"
                required
              />
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Giá cơ bản (VND)
              </label>
              <input
                type="number"
                name="basePrice"
                value={autoGenerateForm.basePrice}
                onChange={handleAutoGenerateFormChange}
                className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                min="10000"
                required
              />
            </div>
            
            <div className="mt-4 p-3 bg-gray-100 rounded-md">
              <h3 className="font-medium mb-2">Thông tin tạo ghế:</h3>
              <p className="text-sm">
                - Tổng số ghế: {autoGenerateForm.rows * autoGenerateForm.seatsPerRow} ghế
              </p>
              <p className="text-sm">
                - Hàng: A-{String.fromCharCode(64 + autoGenerateForm.rows)}
              </p>
              <p className="text-sm">
                - Định dạng ghế: A1, A2, B1, B2, ...
              </p>
              <p className="text-sm">
                - Giá mặc định: {formatPrice(autoGenerateForm.basePrice)}
              </p>
              <p className="text-sm">
                - Giá hàng đầu (A-B): {formatPrice(autoGenerateForm.basePrice * 1.5)}
              </p>
              <p className="text-sm">
                - Giá hàng cuối: {formatPrice(autoGenerateForm.basePrice * 0.8)}
              </p>
            </div>
            
            <div className="flex justify-end gap-2 mt-6">
              <button 
                className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100"
                onClick={handleCloseDialogs}
              >
                Hủy
              </button>
              <button 
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                onClick={handleAutoGenerate}
              >
                Tạo ghế
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Dialog xác nhận xóa tất cả ghế */}
      {openDeleteAllDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-semibold mb-4">Xác nhận xóa tất cả ghế</h2>
            <p className="mb-6 text-red-600">
              Bạn có chắc chắn muốn xóa tất cả ghế trong phòng này không? Hành động này không thể hoàn tác.
            </p>
            
            <div className="flex justify-end gap-2">
              <button 
                className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100"
                onClick={handleCloseDialogs}
              >
                Hủy
              </button>
              <button 
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
                onClick={handleDeleteAllSeats}
              >
                Xóa tất cả
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Notification */}
      {notification.show && (
        <div className={`fixed bottom-4 right-4 p-4 rounded-md shadow-lg ${
          notification.type === 'success' ? 'bg-green-600' : 
          notification.type === 'error' ? 'bg-red-600' : 'bg-blue-600'
        } text-white`}>
          {notification.message}
        </div>
      )}
    </div>
  );
};

export default SeatList;